datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  role          String       @default("user")
  accounts      Account[]
  sessions      Session[]
  friends       Friendship[] @relation("Friend")
  friendsOf     Friendship[] @relation("FriendOf")
  gamesPlayerX  Game[]       @relation("GamePlayerX")
  gamesPlayerO  Game[]       @relation("GamePlayerO")
  gamesWon      Game[]       @relation("GameWinner")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Friendship {
  id        String   @id @default(cuid())
  status    String   @default("pending")
  user1Id   String
  user2Id   String
  createdAt DateTime @default(now())

  user1 User @relation("Friend", fields: [user1Id], references: [id], onDelete: Cascade)
  user2 User @relation("FriendOf", fields: [user2Id], references: [id], onDelete: Cascade)

  @@unique([user1Id, user2Id])
}

model Game {
  id        String   @id @default(cuid())
  playerXId String
  playerOId String
  winnerId  String?
  moves     Move[]
  state     Int // See GameState enum in types.ts
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  playerX User  @relation("GamePlayerX", fields: [playerXId], references: [id])
  playerO User  @relation("GamePlayerO", fields: [playerOId], references: [id])
  winner  User? @relation("GameWinner", fields: [winnerId], references: [id])
}

model Move {
  id        String   @id @default(cuid())
  gameId    String
  playerId  String
  position  Int
  symbol    Int // See PlayerSymbol enum in types.ts
  createdAt DateTime @default(now())

  game Game @relation(fields: [gameId], references: [id])
}
